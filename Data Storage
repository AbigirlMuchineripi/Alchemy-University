//String Manipulation
//Starts with X

function startsWithX(string) {
    // return string.charAt(0) === "x"; || just the same as below
    
    return string[0] ==="x";
     
 }
 
 module.exports = startsWithX;

 // Starts with Casing
 function startsWithX(string) {
   
    return string.toLowerCase().startsWith("x")
     
 }
 console.log("x".toLowerCase() === "x");
 console.log("x".toUpperCase() === "x");
 
 module.exports = startsWithX;

 // Ends with X
 function endsWithX(string) {

    if (string.toLowerCase().endsWith('x') || string.toUpperCase().endsWith('X')) {
        return true;
    }
    else {
        return false;
    }
}
console.log("x".toLowerCase()==="x");
console.log("x".toUpperCase()==="X");


module.exports = endsWithX;


 //Is All X
 function isAllX(string) {
    for(let i=0; i<string.length; i++){
        if(string[i]!=="x" && string[i]!=="X")
        return false

    }
        return true
}
console.log(isAllX("Xx")); // true
console.log(isAllX("xAbX")); // false
module.exports = isAllX;

// Find first x / indexOf
function findFirstX(string) {
    return string.indexOf('x');

}   

module.exports = findFirstX;

//Split at X / Slice
/*
Let's find the longer half of the string before and after the x!

First, you'll need to find the lower-case x.
Once you've found the x, split the string in half. The first half will be the string before the x, the second half will be the string after the x.
Take the longer string and return it!
*/
function splitAtX(string) {
    let xIndex = string.indexOf('x');
    let firstHalf = string.slice(0, xIndex);
    let secondHalf = string.slice(xIndex + 1);
    return firstHalf.length >= secondHalf.length ? firstHalf : secondHalf;   
  }
  /*
  e.gs
  splitAtX("Happyxdays"); // "Happy"
  splitAtX("10xDeveloper"); // "Developer"
  */
  module.exports = splitAtX;



  //  ARRAYS

  /*
  E.g
  const numbers = [1, 2, 3, 4, 5];
  const booleans = [true, false, true, true];
  const strings = ["happy", "go", "lucky"];
  */

// Create Array

const array = [1,2,3] // <-- create an array here!

module.exports = array;

// Has One
function hasOne(array) {
    return array.includes(1)
}

module.exports = hasOne;

// Sum Even

//Sum Even
/*
Running Value

Finding the Average
const result = average([80,90,98,100]); 
console.log( result ); // 92


module.exports = hasOne;

or

function average(array) {
    let total = 0;
    for(let i = 0; i < array.length; i++) {
        total += array[i];
    }
    return (total / array.length);
}

*/ 


function sumEven(array) {
    let total=0 ;
    for(let i=0;  i<array.length; i++){
        if(array[i] % 2 ===0 ){
           total += array[i];
        }
        
    }

   return total ;
}

module.exports = sumEven;


// Unique => Returning a new array

/*
To find unique elements in an array, we can use the filter() 
method and the indexOf() method. 
The indexOf() method is used to check if the current element is 
the first occurrence of that element in the array. If it is, 
then it is added to the new array. If not, then it is ignored.

*/

function unique(array) {
    return array.filter((value, index, self) => {
        return self.indexOf(value) === index;
    });
}

/*
const array = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6];
const unique = unique(array);
console.log(uniqueNumbers); // [1, 2, 3, 4, 5, 6]

 */

//Modifying Array Values- Add one

/*
To add 1 to every element within an array, you can use the map() 
method in JavaScript. The map() method creates a new array with
the results of calling a provided function on every element in the calling array

we are using the map() method to iterate over each element in the 
array and add 1 to it. The map() method returns a new array with
the modified elements. Since we are modifying the original
array directly, we donâ€™t need to return anything from the function.

*/

function addOne(array) {
    array.map((element, index) => {
      array[index] = element + 1;
    });
  }


//Modifying Arrays -Remove Occurrences 
 /*
 Splice()
 The splice() method in JavaScript is used to add and/or
 remove elements from an array.
 It overwrites the original array. 

 Given an array of integers and a number, num, find all 
 the occurrences of the number and remove it from the array.
 */ 
 function removeOccurrences(array, num) {
    for (let i = array.length - 1; i >= 0; i--) {
        if (array[i] === num) {
            array.splice(i, 1);
        }
    }

    for(let i=array.length-1;  i >=0 ; i--){
        if(array[i]=== num){
            array.splice(i,1);
        }

    }
    
}

module.exports = removeOccurrences;



//Objects

//Create Pizza Order Object
const order = {
    pizzas : 4,
    extraCheese : false,
    deliveryInstructions: "Deliver whilst hot."
    
};

module.exports = order;

//Retrieve values
function numberOfPizzas(order) {
    return order.pizzas;
    };

module.exports = numberOfPizzas;


//Array of Objects

/*
Accumulate the Pizza Orders
Given an array of pizza orders, return the total number of pizzas ordered.

The orders are an array of objects, each with pizzas key inside:

const orders = [
    { pizzas: 3 },
    { pizzas: 5 },
    { pizzas: 10 }
];

*/
function numberOfPizzas(orders) {
    const totalPizzasOrdered = orders.reduce((total, order) => {
      return total + order.pizzas;
    }, 0);
  
    return totalPizzasOrdered;
      
  }
  
  module.exports = numberOfPizzas;
  /*
  the reduce method iterates over each element 
  in the orders array, adding the number
   of pizzas from each order to the accumulator total.
   The initial value of total is set to 0. This 
  will correctly calculate the total number of pizzas ordered.
  
  A callback function in JavaScript is a function passed into another 
  function as an argument. This callback can then be invoked within the outer
   function to complete some kind of routine or action.
  
  In the context of the reduce method you used in your code, the callback 
  function is particularly important. reduce is a higher-order function that takes 
  a callback function as its first argument. This callback function is executed on each element in the array.
  
  The callback function for reduce takes two main arguments:
  
  Accumulator (total in your case): This is the accumulated value returned
   after the last iteration of the callback function. For the first iteration, 
   it starts with the value provided as the second argument to reduce. If no
    initial value is provided, it starts with the first element of the array.
  
  Current Value (order in your code): This is the current element being processed in the array.
  
  So, in your numberOfPizzas function, the callback function is used to calculate the total
   number of pizzas. On each iteration, the function adds the number of pizzas from the 
   current order (order.pizzas) to the total number of pizzas accumulated so far (total). 
   The process continues until all elements in the 
  array have been processed, resulting in the final total.
  
  */

  //Typed Orders
  //Enumerated Types
  const ORDER_TYPES = {
    PIZZA: 0,
    BURGER: 2,
    CHIPS:1
    
}

module.exports = ORDER_TYPES;

//Add By Type
//Importing Files

/*
Modify the numberOfPizzas function to only count pizzas when the order.type is equal to ORDER_TYPES.PIZZA.

The orders will have a type keyword:

const orders = [
    { pizzas: 3, type: ORDER_TYPES.PIZZA },
    { wings: 12, type: ORDER_TYPES.WINGS },
];                                                                                                           
        


function numberOfPizzas(orders) {
  const totalPizzas = orders.reduce((total, order) => {
    return total + order.pizzas;
  }, 0);

  return totalPizzas;    
}

module.exports = numberOfPizzas;


*/


const ORDER_TYPES = require('./orderTypes.js')

function numberOfPizzas(orders) {
  return orders.reduce((total, order) => {
  if(order.type === ORDER_TYPES.PIZZA){
    return total + order.pizzas;
  }  
   return total; 
  }, 0);

  return totalPizzas;
    
}

module.exports = numberOfPizzas;
/*
the reduce method iterates over each element 
in the orders array, adding the number
 of pizzas from each order to the accumulator total.
 The initial value of total is set to 0. This 
will correctly calculate the total number of pizzas ordered.

A callback function in JavaScript is a function passed into another function as an argument. This callback can then be invoked within the outer function to complete some kind of routine or action.

In the context of the reduce method you used in your code, the callback function is particularly important. reduce is a higher-order function that takes a callback function as its first argument. This callback function is executed on each element in the array.

The callback function for reduce takes two main arguments:

Accumulator (total in your case): This is the accumulated value returned after the last iteration of the callback function. For the first iteration, it starts with the value provided as the second argument to reduce. If no initial value is provided, it starts with the first element of the array.

Current Value (order in your code): This is the current element being processed in the array.

So, in your numberOfPizzas function, the callback function is used to calculate the total number of pizzas. On each iteration, the function adds the number of pizzas from the current order (order.pizzas) to the total number of pizzas accumulated so far (total). The process continues until all elements in the 
array have been processed, resulting in the final total.

*/

// Object Keys
//Given an object, find the number of keys inside
// the object. Return this number.
function numberOfKeys(object) {
  
    return Object.keys(object).length;   
   }
   
   module.exports = numberOfKeys;



